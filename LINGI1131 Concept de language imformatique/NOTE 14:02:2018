--Note du cours de "Concept de language informatique"
-- 14 Février 2018
-- LINGI 1131
-- Valentin Haveaux

Contenu du cours: ° Invariant programming
                    --> the right way to matke loops
                    --> Rule2 automatic
                  ° Merge sort algorithm
                  ° Higher-order programming
                  ° Trees, kernel, language

° Invariant programming
  ° Formula w 3 ports --> constant (input arg.)
                      --> growing port
                      --> Shrinking port
  ° Reverse function
    --> Invariant: Mathematical Formula
        Reverse(lo) = append(reverse(l), a)
                                    l=[ai ai+1 ... an-1]
                                    a=[ai-1 ai-2 ... a0]
          lo = [a0 ... an-1]

        Start: l=l0
                a=nil
        Step:   (l,a)
                |
                |
                (l.2, l.1|a)
                  |     |
                  l'    a'
        End :  (nil,a)
                    |
                    |
                    result

            %Reverse with invariant programming
            declare
            fun {Reverse L A}
              if L==nil then
                A
              else
                {Reverse L.2 L.1|A}
              end
            end
            declare
            L0=[1 2 3 4 5]
            {Browse {Reverse L0 nil}}

  ° While loop

    list l,a;
      [ l = l0;
      [ a = nil;
      ---- EFFACER TROP VITE CONNARD ---

  ° Merge sort

    L = a0 a1 ............................. an-1
                  |         |
                 |           |
                |             |
    split       |             |
    0(n)        L1            L2
    MergeSort   |             |
                S1            S2
    Merge       |             |
    0(n)         |           |
                  |         |
                      S

  ° Split

    [a0 ... an-1]
    -->
      [a0 a2 a4 ...]
      [a1 a3 a5 ...]

    ° Merge

      S1 = [4 7 9 13]
      S2 = [2 6 8 10 19]

      S = [2 4 6 7 8 9 10 13 19]

    %MergeSort algorithm
    declare
    proc {Split L L1 L2}
      case L                                              Local T1 T2 in
      of H1|H2|T then T1 T2 in                              L1= H1|T1
        %Build L1 and L2                                    L2= H2|T2
        L1=H1|T1                                            {Split T T1 T2}
        L2=H2|T2                                          end
        {Split T T1 T2}
      [] H|nil then
        L1=[H] L2=nil
      [] nil then
        L1=nil L2=nil
      end
    end

    declare L L1 L2 in
    L=[3 7 6 5 8 4 33 5]
    {Split L L1 L2}
    {Browse L1}
    {Browse L2}

    declare
    fun {Merge S1 S2}
      case S1|S2
        of (H1|H2)|(H2|T2) then
          if H1<H2 then
            H1|{Merge T1 S2}
          elseif H1>H2 then
            H2|{Merge S1 T2}
          else /* H1==H2 */
            H1|H2|{Merge T1 T2}
          end
      [] nil|S2 then
         S2
      [] S1|nil then
         S1
      end
    end

    {Browse {Merge [3 6 8 33] [4 5 5 7]}}

    declare
    fun {MergeSort L}
      case L
      of nil then
        nil
      [] H|nil then
        [H]
      [] _|_|_ then L1 L2 S1 S2 in
        {Split L L1 L2}
        S1={MergeSort L1}
        S2={MergeSort L2}
        {Merge S1 S2}
      end
    end

    {Browse {MergeSort [9 6 4 2 6 3 2 1]}}

  ° Pattern matehing

    Instruction case                                        pattern
                  |                                             |
                |   |                                         |   |
            L = 8   |                                         H1  |
                  |   |                                         |   |
                  3   |                                         H2  T
                    |   |
                    6   |
                      |   |
                      6   |
                        |   |
                        2   |
                            nil

--------------------------
--------- BREAK ----------
--------------------------

  ° Higher-order programming
    - All abstraction are built
    - Object-orienth prog.
    - Classes, objects, meta-classes
    - Abstract data types

    *.[ Functions (and procedures)
      [ are values in memory
    *.[ Values have two process
      [ code + conditional env.

    declare                         memory
    fun {Sqr X}                 Sqr = (proc{$ X R} R=X*X end, ...)
      X*X                                |  ----------------  ----
    end                       function value      code        analymouns prc

    Kernel language (to understand)
    Si on n'ajoute pas ce qu'il y a en dessous

    [ proc {Sqr X R}
    [   R=X*x
    [ end

    Sqr = proc{$ X R} R=X*X end
          ---------------------
                  |||
          analymouns proc / proc, value

    declare
    A=5
    fun {Add X}
      X+A
    end

    Add = proc{$ X R}
            R=X+A
          end
    Y={Add 10}

  ° Order of a func or proc.

    . A func reverse imports & output contains no functions in IST order
    . A func us orer N+1 if args + output contain max order of order N.


  °Genericity
    . func passed any arg.

    %Genericity
    declare
    fun {Map F L}
      case L
      of nil then nil
      [] H|T then {F H}|{Map F T} end
    end
    {Browse {Map fun {$ X} X*X end [1 2 3 4 5]}}


  °Instantiation
    . Func returns as output

      %Instantiation
      declare
      fun {MakeAdd A}
        fun {$ X} X+A end
      end
      Add5={MakeAdd 5}
      {Browse {Add5 10}}

      %Bigger example
      declare
      fun {MakeAddX A}
        fun {$ B}
          fun {% C}
            A+B+C
          end
        end
      end

      declare
      F1={MakeAddX 10}
      F2={F1 20}
      {Browse {F2 30}}

      % F1 has fixed the first arg to 10
      % F2 has fixed the first arg to 10 + second arg to 20
      % Call F2 gives the third arg and returns result

  ° Composition
    . 2 funcs as input
    . Composed func as output

    %Composition
    declare
    fun {Compose F G}
      fun {$ X} {F {G X}} end
    end

    declare
    Fnew= {Compose fun {$ X} X*X end
            fun {$ X} X+1 end}
    {Browse {Fnew 10}}

  ° Fold
    ided:
      L = [a0 ... an-1]
      S = a0 + a1 + ... + an-1
        = (...(((0+a0)+a1)+a2)...+an-1)

----------------------------
---   PAS PU TOUT NOTER  ---
----------------------------

      S = {Fold L F U}

    % Fold function
    % Abstraction an accumulator (hides acc. internally)
    declare
    fun {Fold L F U}
      case L
      of nil then
        U
      [] H|T then
        {Fold T F {F U H}}
      end
    end

    {Browse {Fold [1 2 3 4]
              fun {$ X Y} X+Y end
              0}}

    {Browse {Fold [1 2 3 4]
              fun {$ X Y} X*Y end
              0}}

    {Browse {Fold [1 2 3 4]
              fun {$ X Y} if X>Y then X else Y end end
              0}}
