
@OK: rgb(128,255,0);
@NOK: rgb(255,0,0);
@?: rgb(255,128,0);

Site(s) utiles:
http://wiki.c2.com/?QueryLanguageComparison


--EXERCICE 1 rgb(128,255,0)
  List the names of all the countries.

  --SQL rgb(128,255,0)
      SELECT name
      FROM Country
  --REL rgb(128,255,0)
      Country {name}

--EXERCICE 2 rgb(128,255,0)
  List the names of all the moutains that exceed (strictly) 4000 meters in height.

  --SQL rgb(128,255,0)
    SELECT name
    FROM Mountain
    WHERE height > 4000
  --REL rgb(128,255,0)
    (Mountain WHERE height > 4000.0) {name}

--EXERCICE 3 rgb(128,255,0)
  List the provinces of Belgium (country code B) that have a population that doesn't exceed
  one million; for each province, provide the name of the capital and the population.

  --SQL rgb(128,255,0)
    SELECT capital, population
    FROM Province
    WHERE country = 'B' AND population < 1000000
  --REL rgb(128,255,0)
    (Province WHERE country = 'B' AND population < 1000000) {capital, population}

--EXERCICE 4 rgb(128,255,0)
  List the names of all languages in the database. The result must be a
  relation with one attribute called language

  --SQL rgb(128,255,0)
    SELECT DISTINCT name
    FROM Language
  --REL rgb(128,255,0)
    (Language) {name} RENAME {name AS language}

--EXERCICE 5 rgb(128,255,0)
  For each country that has declared independence, give its full name and its independence date.

  --SQL rgb(128,255,0)
    SELECT name, independence
    FROM Country, Independence
    WHERE Independence.country = Country.code
  --REL rgb(128,255,0)
    (Independence JOIN Country WHERE country = code) {name, independence}

--EXERCICE 6 rgb(128,255,0)
  List all countries which are on two different continents. The result must be a relation
  defined with 3-tuple attributes {name, percentage, continent} where name is the name of the country.

  --SQL rgb(128,255,0)
    SELECT name, percentage, continent
    FROM Country, Encompasses
    WHERE percentage != 100 AND Country.code = Encompasses.country
  --REL rgb(128,255,0)
    (Country JOIN Encompasses WHERE  NOT (percentage = 100.0) AND code = country) {name, percentage, continent}

--EXERCICE 7 rgb(128,255,0)
  List the Swiss mountains with a height between 4400 and 4500. The result must
  be a relation composed of 2-tuples with attributes {mountain, height}.

  --SQL rgb(128,255,0)
    SELECT name, height
    FROM Mountain, GeoMountain
    WHERE GeoMountain.country = 'CH' AND Mountain.name = GeoMountain.mountain AND height BETWEEN 4400 AND 4500
  --REL rgb(128,255,0)
    (Mountain Join GeoMountain WHERE country = 'CH' AND name = mountain AND height > 4400.0 AND height < 4500.0) {mountain, height}

--EXERCICE 8 rgb(255,0,0)
  List all pairs of neighbouring countries. The result must be a relation composed of
  2-tuples with attributes {name1, name2}, i.e., the full country names must be given.
  (For instance, a result could be {Belgium, France}.) Make sure that every pair of
  neighbouring countries is only included once.

  --SQL rgb(128,255,0)
  SELECT C1.name, C2.name
FROM borders, Country C1, Country C2
WHERE country1 < country2
  AND country1 = C1.code 
  AND country2 = C2.code

--EXERCICE 9
  List the name of the countries that do not have mountains.

  --SQL rgb(128,255,0)
    SELECT name
    FROM Country
    WHERE code NOT IN (
        SELECT country
        FROM GeoMountain)

--EXERCICE10 rgb(255,0,0)
  List all names that are shared by a province and a country. (Hint ":" Your Tutorial D
  query may not have more than 50 characters.)

--EXERCICE 11
  List the full names of the countries that border the United States, as well as the
  countries that border those bordering countries":" i.e., the output should contain
  Mexico, but also Belize, which borders Mexico. The United States itself should
  not be part of the output.

  --SQL rgb(255,0,0)
    SELECT country1
    FROM Borders
    WHERE country2 = 'USA'

--EXERCICE 12
  Count the number of different ethnic groups. The result must be a
  relation composed by a 1-tuple attribute {cnt}.

  --SQL rgb(128,255,0)
    SELECT count(
        DISTINCT name) AS cnt
    FROM EthnicGroup
  --REL
    SUMMARIZE EthnicGroup BY {name} ADD (COUNT() AS cnt)

--EXERCICE 13
  List the names of the countries where the citizens speak at least 3 languages.
  The result must be a relation composed of 2-tuples with attributes {name, cnt},
  where name is the name of the country and cnt is the number of languages that citizens speak.

  --SQL rgb(128,255,0)
    SELECT Country.name, COUNT(country) AS cnt
    FROM Country, Language
    WHERE code = country
    GROUP BY Country.name
    HAVING   COUNT(country) >= 3

--EXERCICE 14
  List the most prominent language(s) for each country; i.e.,
  list for each country those languages for which the percentage is maximal.
  You are not allowed to use SUMMARIZE. The result must be a relation composed
  of 2-tuples with attributes {country, name}, where country is the code of
  the country and name is the name of the language.

  --SQL rgb(255,128,0) OK MAIS NOK POUR INGINIOUS
    SELECT Country.name AS country, Language.name AS name
    FROM Country, Language
    WHERE code = country
    GROUP BY Country.name
    HAVING MAX(percentage)

--EXERCICE 15 rgb(255,0,0)
  In the given database the Borders relation is symmetric":" if the country 1 (c1)
  borders country 2 (c2), country 2 also borders country 1. One may wish to check
  this property on a given database. Write a query that determines all tuples {c1, c2},
  where c1 and c2 are the codes of the countries, for which the inverse direction is missing.
  (Note":" on the given database, the output of this query should be empty; on a database
  in which the Border relation is not symmetric, however, it should return the violating tuples.
  Create a database yourself to check this.)
