-- LINGI1121 Méthode de conception de programmes
-- TP1 Axiomes et logique de Hoare
-- 15/02/2018
-- Valentin Haveaux


° EXERCICE 1
    a) Valide
    b) Valide
    c) Invalide
    d) Valide
    e) Invalide
    f) Invalide
    j) Valide
    h) Invalide
    i) Invalide
    j) Valide
    k) Invalide
    l) Valide

° EXERCICE 2
    a) [ X=n ] n := n * 2; [ n=X*2 ]
    b) [ a+b = M ∧ b > 0 ] a,b := a+1, b-1; [ b >= 0 ∧ a+b = M ]

° EXERCICE 3
    [a =A & b = B & c = C]
                        <-- b = B & c = C & a = A
      a := a + b + c;
                        <-- b = B & c = C & (a-b-c) = A
      c := a - b - c;
                        <-- b = B & (a-b-c) = C & c = A
      b := a - b - c;
                        <-- [ (a-b-c) = B & b=C & c=A ]
      a := a - b - c;
    [a = B & b = C & c = A]

° EXERCICE 4 a
    @Pre [x = X ∧ y = Y]

      if X > Y then
        [x > y ∧ x = X ∧ y = Y]
        x,y := y,x
        [@Post]
      else
        [x <= y ∧ x = X ∧ y = Y]
        skip
        [@Post]
      end

    @Post [x <= y ∧ {(x = X ∧ y = Y) v (x = Y ∧ y = X)}]

° EXERCICE 4 b
    @Pre [true]

      if x - 5 > 0 then
        [x - 5 > 0 ∧ true]
        y := x - 5
        [@Post]
      else
        [NEG (x-5>0) ∧ true]
        y := 5 - x
        [@Post]
      end

    @Post [y = abs(x - 5)]

    [x-5>0]         ||  "Implication OK"
                    vv
      [x-5 = abs(x-5)]
      y := x-5    ∧∧
                  ||    "Axiome :="
      [y= abs(x-5)]
    [x-5 <= 0]      ||  "Implication OK"
                    vv
      [5-x = abs(x-5)]
      y := 5-x      ∧∧  "Axiome :="
                    ||
      [y = abs(x-5)]


° EXERCICE 5
    @Pre []

      [invariant]
      while C {
        [invariant ∧ C ∧ V = V*]
        body
        [invariant]
      }
      [invariant ∧ NEG C ∧ 0 <= V < V*]

    @Post []
